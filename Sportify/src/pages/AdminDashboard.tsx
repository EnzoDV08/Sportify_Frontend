import { useEffect, useState } from 'react'
import {
  fetchUserAchievements,
  createAchievement,
  assignAchievement,
  UserAchievement,
  fetchAllAchievements,
} from '../services/api'
import '../Style/AdminDashboard.css'

interface FullAchievement extends UserAchievement {
  achievementId: number
}

const AdminDashboard = () => {
  const [userAchievements, setUserAchievements] = useState<UserAchievement[]>([])
  const [allAchievements, setAllAchievements] = useState<FullAchievement[]>([])
  const [loading, setLoading] = useState(true)

  const [selectedUserId, setSelectedUserId] = useState<number | null>(1)
  const [userIdInput, setUserIdInput] = useState<string>('1')

  const [createForm, setCreateForm] = useState({
    title: '',
    description: '',
    isAutoGenerated: false,
  })

  const [assignForm, setAssignForm] = useState({
    userId: '',
    achievementId: '',
    eventId: '',
    awardedByAdminId: '',
  })

  const loadData = async (userId: number) => {
    if (!userId || isNaN(userId)) {
      console.warn('🚫 Invalid user ID:', userId)
      return
    }

    setLoading(true)
    try {
      const userData = await fetchUserAchievements(userId)
      const allData = await fetchAllAchievements()
      setUserAchievements(userData)
      setAllAchievements(allData)
    } catch (err) {
      console.error('❌ Error loading achievements:', err)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (selectedUserId !== null && !isNaN(selectedUserId)) {
      loadData(selectedUserId)
    }
  }, [selectedUserId])

  const handleCreateSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      const success = await createAchievement(createForm)
      if (success) {
        alert('✅ Achievement created!')
        setCreateForm({ title: '', description: '', isAutoGenerated: false })
        if (selectedUserId !== null) await loadData(selectedUserId)
      }
    } catch (err) {
      alert('❌ Error creating achievement')
      console.error(err)
    }
  }

  const handleAssignSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      const success = await assignAchievement(assignForm)
      if (success) {
        alert('🏅 Achievement assigned!')
        setAssignForm({ userId: '', achievementId: '', eventId: '', awardedByAdminId: '' })
        if (selectedUserId !== null) await loadData(selectedUserId)
      }
    } catch (err) {
      alert('❌ Error assigning achievement')
      console.error(err)
    }
  }

  const autoAchievements = allAchievements.filter(a => a.isAutoGenerated)
  const manualAchievements = allAchievements.filter(a => !a.isAutoGenerated)

  return (
    <div className="admin-dashboard">
      <header className="dashboard-header">
        <h1>📋 Admin Dashboard</h1>
        <p className="subheading">Manage all achievements, assign them to users, or let them unlock automatically.</p>
      </header>

      <div style={{ marginBottom: '1rem' }}>
        <label style={{ marginRight: '8px' }}>🔍 View Achievements for User ID:</label>
        <input
          type="number"
          value={userIdInput}
          onChange={(e) => setUserIdInput(e.target.value)}
          onBlur={() => {
            const parsed = parseInt(userIdInput)
            if (!isNaN(parsed)) {
              setSelectedUserId(parsed)
            }
          }}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              const parsed = parseInt(userIdInput)
              if (!isNaN(parsed)) {
                setSelectedUserId(parsed)
              }
            }
          }}
          placeholder="Enter User ID"
          style={{ padding: '6px', borderRadius: '4px', border: '1px solid #ccc' }}
        />
      </div>

      <section>
        <h2 className="section-title">🏅 User {selectedUserId ?? '...'}'s Achievements</h2>
        {loading ? (
          <p className="text-muted">Loading achievements...</p>
        ) : userAchievements.length === 0 ? (
          <p className="text-muted">No achievements assigned to this user yet.</p>
        ) : (
          <div className="achievement-grid">
            {userAchievements.map((ach, idx) => (
              <div className="achievement-card" key={idx}>
                <h3>{ach.title}</h3>
                <p>{ach.description}</p>
                <span className={`tag ${ach.isAutoGenerated ? 'auto' : 'admin'}`}>
                  {ach.isAutoGenerated ? 'Unlocked Automatically' : 'Assigned by Admin'}
                </span>
              </div>
            ))}
          </div>
        )}
      </section>

      <section className="form-section">
        <div className="form-card">
          <h3>Create New Achievement</h3>
          <form onSubmit={handleCreateSubmit}>
            <input
              type="text"
              placeholder="Achievement Title"
              value={createForm.title}
              onChange={(e) => setCreateForm({ ...createForm, title: e.target.value })}
              required
            />
            <textarea
              placeholder="Short Description"
              value={createForm.description}
              onChange={(e) => setCreateForm({ ...createForm, description: e.target.value })}
              required
            />
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={createForm.isAutoGenerated}
                onChange={(e) => setCreateForm({ ...createForm, isAutoGenerated: e.target.checked })}
              />
              Auto-Generated
            </label>
            <button type="submit">➕ Create</button>
          </form>
        </div>

        <div className="form-card">
          <h3>Assign to User</h3>
          <form onSubmit={handleAssignSubmit}>
            <input
              type="number"
              placeholder="User ID"
              value={assignForm.userId}
              onChange={(e) => setAssignForm({ ...assignForm, userId: e.target.value })}
              required
            />
            <input
              type="number"
              placeholder="Achievement ID"
              value={assignForm.achievementId}
              onChange={(e) => setAssignForm({ ...assignForm, achievementId: e.target.value })}
              required
            />
            <input
              type="number"
              placeholder="Event ID (optional)"
              value={assignForm.eventId}
              onChange={(e) => setAssignForm({ ...assignForm, eventId: e.target.value })}
            />
            <input
              type="number"
              placeholder="Awarded By Admin ID"
              value={assignForm.awardedByAdminId}
              onChange={(e) => setAssignForm({ ...assignForm, awardedByAdminId: e.target.value })}
            />
            <button type="submit">🎯 Assign</button>
          </form>
        </div>
      </section>

      <section className="achievement-tables">
        <h2 className="section-title">🧠 Auto-Unlocked Achievements</h2>
        <div className="achievement-grid">
          {autoAchievements.map((ach) => (
            <div className="achievement-card" key={ach.achievementId}>
              <h3>{ach.title} <span className="id-tag">(ID: {ach.achievementId})</span></h3>
              <p>{ach.description}</p>
              <span className="tag auto">Auto Achievement</span>
            </div>
          ))}
        </div>

        <h2 className="section-title">🎖️ Admin-Only Achievements</h2>
        <div className="achievement-grid">
          {manualAchievements.map((ach) => (
            <div className="achievement-card" key={ach.achievementId}>
              <h3>{ach.title} <span className="id-tag">(ID: {ach.achievementId})</span></h3>
              <p>{ach.description}</p>
              <span className="tag admin">Admin Assigned</span>
            </div>
          ))}
        </div>
      </section>
    </div>
  )
}

export default AdminDashboard







