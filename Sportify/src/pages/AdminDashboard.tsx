import { useEffect, useState } from 'react'
import {
  fetchUserAchievements,
  fetchAllAchievements,
  createAchievement,
  assignAchievement,
} from '../services/api'
import { UserAchievement, FullAchievement } from '../models/achievement'
import { motion } from 'framer-motion'
import '../Style/AdminDashboard.css'

const AdminDashboard = () => {
  const [userAchievements, setUserAchievements] = useState<UserAchievement[]>([])
  const [allAchievements, setAllAchievements] = useState<FullAchievement[]>([])
  const [loading, setLoading] = useState(true)
  const [recentActions, setRecentActions] = useState<string[]>([])
  const [selectedUserId, setSelectedUserId] = useState<number | null>(1)
  const [userIdInput, setUserIdInput] = useState<string>('1')

  const [createForm, setCreateForm] = useState({
    title: '',
    description: '',
    isAutoGenerated: false,
  })

  const [assignForm, setAssignForm] = useState({
    userId: '',
    achievementId: '',
    eventId: '',
    awardedByAdminId: '',
  })

  const [eventForm, setEventForm] = useState({
  title: '',
  description: '',
  dateTime: '',
  location: '',
  type: 'public',
})


  const loadData = async (userId: number) => {
    if (!userId || isNaN(userId)) return
    setLoading(true)
    try {
      const userData = await fetchUserAchievements(userId)
      const allData = await fetchAllAchievements()
      setUserAchievements(userData)
      setAllAchievements(allData)
    } catch (err) {
      console.error('‚ùå Error loading data:', err)
    } finally {
      setLoading(false)
    }
  }

  const handleCreateEvent = (e: React.FormEvent) => {
  e.preventDefault()
  logAction(`üìÖ Created event: ${eventForm.title}`)
  // Ideally call your backend here
  setEventForm({ title: '', description: '', dateTime: '', location: '', type: 'public' })
}


  useEffect(() => {
    if (selectedUserId !== null && !isNaN(selectedUserId)) {
      loadData(selectedUserId)
    }
  }, [selectedUserId])

  const logAction = (msg: string) => {
    setRecentActions((prev) => [msg, ...prev.slice(0, 4)])
  }

  const handleCreateSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      const success = await createAchievement(createForm)
      if (success) {
        logAction(`‚úÖ Created "${createForm.title}"`)
        setCreateForm({ title: '', description: '', isAutoGenerated: false })
        if (selectedUserId) await loadData(selectedUserId)
      }
    } catch (err) {
      alert('‚ùå Failed to create')
      console.error(err)
    }
  }

  const handleAssignSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      const success = await assignAchievement(assignForm)
      if (success) {
        logAction(`üéØ Assigned ID ${assignForm.achievementId} to User ${assignForm.userId}`)
        setAssignForm({ userId: '', achievementId: '', eventId: '', awardedByAdminId: '' })
        if (selectedUserId) await loadData(selectedUserId)
      }
    } catch (err) {
      alert('‚ùå Failed to assign')
      console.error(err)
    }
  }

  const autoAchievements = allAchievements.filter(a => a.isAutoGenerated)
  const manualAchievements = allAchievements.filter(a => !a.isAutoGenerated)

  return (
    <div className="p-8 bg-white min-h-screen text-black font-sans overflow-y-auto">
      {/* HEADER */}
      <motion.div
        className="mb-10"
        initial={{ opacity: 0, y: -10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <h1 className="text-4xl font-bold text-[#FF9900] flex items-center gap-2">üìã Admin Dashboard</h1>
        <p className="text-gray-500 mt-1">Create, assign, and review achievements for Sportify users and events.</p>
      </motion.div>

      {/* USER LOOKUP */}
      <div className="mb-8 max-w-md">
        <label className="font-semibold text-[#FF9900] text-lg">üîç View achievements for User ID</label>
        <input
          type="number"
          className="input input-bordered w-full mt-1"
          placeholder="Enter User ID"
          value={userIdInput}
          onChange={(e) => setUserIdInput(e.target.value)}
          onBlur={() => {
            const parsed = parseInt(userIdInput)
            if (!isNaN(parsed)) setSelectedUserId(parsed)
          }}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              const parsed = parseInt(userIdInput)
              if (!isNaN(parsed)) setSelectedUserId(parsed)
            }
          }}
        />
      </div>

      {/* RECENT ACTIONS */}
      <div className="mb-8">
        <h2 className="text-lg font-bold text-[#FF9900]">üïí Recent Admin Actions</h2>
        <ul className="text-sm text-gray-600 mt-2 list-disc ml-5">
          {recentActions.length === 0 ? <li>No recent actions.</li> : recentActions.map((a, i) => <li key={i}>{a}</li>)}
        </ul>
      </div>

      {/* USER ACHIEVEMENTS */}
      <div className="mb-10">
        <h2 className="text-xl font-bold text-[#FF9900] mb-3">üéñÔ∏è User {selectedUserId} Achievements</h2>
        {loading ? (
          <p className="text-gray-400">Loading achievements...</p>
        ) : userAchievements.length === 0 ? (
          <p className="text-gray-400">No achievements assigned.</p>
        ) : (
          <motion.div
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.4 }}
          >
            {userAchievements.map((ach, idx) => (
              <div className="bg-black text-white p-4 rounded-xl shadow-md" key={idx}>
                <h3 className="text-lg font-semibold">{ach.title}</h3>
                <p className="text-sm">{ach.description}</p>
                <span className={`inline-block mt-2 text-xs px-3 py-1 rounded-full ${ach.isAutoGenerated ? 'bg-orange-500' : 'bg-yellow-300 text-black'}`}>
                  {ach.isAutoGenerated ? 'Auto-Unlocked' : 'Admin Assigned'}
                </span>
              </div>
            ))}
          </motion.div>
        )}
      </div>

      {/* FORM CARDS */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-14">
        {/* CREATE */}
        <div className="bg-[#1A1A1A] text-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-bold text-[#FF9900] mb-2">‚ûï Create Achievement</h3>
          <p className="text-sm text-gray-400 mb-4">Define a new achievement that users can unlock or receive.</p>
          <form onSubmit={handleCreateSubmit} className="space-y-3">
            <input type="text" placeholder="Title" className="input input-bordered w-full bg-white text-black"
              value={createForm.title}
              onChange={(e) => setCreateForm({ ...createForm, title: e.target.value })} required />
            <textarea placeholder="Description" className="textarea textarea-bordered w-full bg-white text-black"
              value={createForm.description}
              onChange={(e) => setCreateForm({ ...createForm, description: e.target.value })} required />
            <label className="flex items-center gap-2">
              <input type="checkbox" className="checkbox checkbox-warning"
                checked={createForm.isAutoGenerated}
                onChange={(e) => setCreateForm({ ...createForm, isAutoGenerated: e.target.checked })} />
              <span>Auto-Generated</span>
            </label>
            <button type="submit" className="btn bg-[#FF9900] hover:bg-[#e78b00] text-white w-full">Create</button>
          </form>
        </div>

        {/* ASSIGN */}
        <div className="bg-[#1A1A1A] text-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-bold text-[#FF9900] mb-2">üéØ Assign Achievement</h3>
          <p className="text-sm text-gray-400 mb-4">Assign an existing achievement to a user.</p>
          <form onSubmit={handleAssignSubmit} className="space-y-3">
            {['User ID', 'Achievement ID', 'Event ID (optional)', 'Awarded By Admin ID'].map((label, i) => (
              <input
                key={label}
                type="number"
                placeholder={label}
                className="input input-bordered w-full bg-white text-black"
                value={(Object.values(assignForm) as string[])[i]}
                onChange={(e) => setAssignForm({ ...assignForm, [Object.keys(assignForm)[i]]: e.target.value })}
              />
            ))}
            <button type="submit" className="btn btn-success w-full">Assign</button>
          </form>
        </div>
      </div>

      {/* TABLES */}
      <div className="mb-12">
        <h2 className="text-2xl font-bold text-[#FF9900] mb-2">üß† Auto-Unlocked Achievements</h2>
        <div className="overflow-x-auto mb-10">
          <table className="table table-zebra bg-[#F5F5F5] border border-gray-200 rounded-lg">
            <thead className="bg-[#FFE5B4] text-[#1A1A1A] font-bold text-sm">
              <tr><th>ID</th><th>Title</th><th>Description</th></tr>
            </thead>
            <tbody>
              {autoAchievements.map((a, index) => (
            <tr key={a.achievementId} className={index % 2 === 0 ? 'bg-white text-black' : 'bg-[#1A1A1A] text-white'}>
              <td>{a.achievementId}</td>
              <td className="font-semibold">{a.title}</td>
              <td>{a.description}</td>
            </tr>
          ))}

            </tbody>
          </table>
        </div>

        <h2 className="text-2xl font-bold text-[#FF9900] mb-2">üéñÔ∏è Admin-Only Achievements</h2>
        <div className="overflow-x-auto mb-10">
          <table className="table table-zebra bg-[#F5F5F5] border border-gray-200 rounded-lg">
            <thead className="bg-[#FFE5B4] text-[#1A1A1A] font-bold text-sm">
              <tr><th>ID</th><th>Title</th><th>Description</th></tr>
            </thead>
            <tbody>
              {manualAchievements.map((a, index) => (
            <tr key={a.achievementId} className={index % 2 === 0 ? 'bg-white text-black' : 'bg-[#1A1A1A] text-white'}>
              <td>{a.achievementId}</td>
              <td className="font-semibold">{a.title}</td>
              <td>{a.description}</td>
            </tr>
          ))}

            </tbody>
          </table>
        </div>
        <div className="mt-16 mb-20">
  <h2 className="text-2xl font-bold text-[#FF9900] mb-4">üìÖ Create New Event</h2>
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.4 }}
    className="bg-[#1A1A1A] p-6 rounded-lg shadow-lg text-white max-w-2xl"
  >
    <form onSubmit={handleCreateEvent} className="space-y-4">
      <input
        type="text"
        placeholder="Event Title"
        className="input input-bordered w-full"
        value={eventForm.title}
        onChange={(e) => setEventForm({ ...eventForm, title: e.target.value })}
        required
      />
      <textarea
        placeholder="Description"
        className="textarea textarea-bordered w-full"
        value={eventForm.description}
        onChange={(e) => setEventForm({ ...eventForm, description: e.target.value })}
        required
      />
      <input
        type="datetime-local"
        className="input input-bordered w-full"
        value={eventForm.dateTime}
        onChange={(e) => setEventForm({ ...eventForm, dateTime: e.target.value })}
        required
      />
      <input
        type="text"
        placeholder="Location"
        className="input input-bordered w-full"
        value={eventForm.location}
        onChange={(e) => setEventForm({ ...eventForm, location: e.target.value })}
        required
      />
      <select
        className="select select-bordered w-full"
        value={eventForm.type}
        onChange={(e) => setEventForm({ ...eventForm, type: e.target.value })}
      >
        <option value="public">Public</option>
        <option value="private">Private</option>
      </select>
      <button type="submit" className="btn bg-[#FF9900] hover:bg-[#e68900] text-white">Create Event</button>
    </form>
  </motion.div>
</div>

      </div>

      {/* Final Spacer */}
      <div className="h-32" />
    </div>
  )
}

export default AdminDashboard










